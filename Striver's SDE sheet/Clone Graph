/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* solve(Node* node,map<Node*,Node*> &mp){
        Node* node1=NULL;

        if(mp.find(node)==mp.end()){
            node1=new Node;
            mp[node]=node1;
            node1->val=node->val;
        }
        else {
            node1=mp[node];
            node1->val=node->val;
        }

        for(auto i : node->neighbors){
            Node* temp;
            if(mp.find(i)==mp.end()) temp=solve(i,mp);
            else temp=mp[i];
            node1->neighbors.push_back(temp);
        }
        return(node1);
    }
    Node* cloneGraph(Node* node) {
        if(node==NULL) return(node);
        map<Node*,Node*> mp;
        return(solve(node,mp));
    }
};

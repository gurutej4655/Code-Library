class Solution {
public:
    int Merge(vector<int> &nums,int low,int mid,int high){
        int n1=mid-low+1,n2=high-mid,i=0,j=0,k=low;
        int a[n1],b[n2];

        for(i=0;i<n1;i++) a[i]=nums[i+low];
        for(i=0;i<n2;i++) b[i]=nums[i+mid+1];

        i=0;j=0;
        int ans=0;
        for(int i=0;i<n1;i++){
            while(j<n2 && a[i]>(2*(long)b[j])) j++;
            ans=ans+(j);
        }
        i=0;j=0;

        while(i<n1 && j<n2){
            if(a[i]<=b[j]){
                nums[k]=a[i];
                i++;k++;
            }
            else {
                nums[k]=b[j];
                j++;
                k++;
            }
        }
        while(i<n1){
            nums[k]=a[i];
            i++;
            k++;
        }
        while(j<n2){
            nums[k]=b[j];
            j++;
            k++;
        }return(ans);
    }
    int MergeSort(vector<int> &nums,int low,int high){
        int ans=0;
        if(low<high){
            int mid=(low+high)/2;

            ans+=MergeSort(nums,low,mid);
            ans+=MergeSort(nums,mid+1,high);
            ans+=Merge(nums,low,mid,high);
        }return(ans);
    }
    int reversePairs(vector<int>& nums) {
        return(MergeSort(nums,0,nums.size()-1));        
    }
};

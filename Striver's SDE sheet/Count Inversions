#include <bits/stdc++.h> 
long long Merge(long long *arr,long long low,long long mid,long long high){
    long long n1=mid-low+1,n2=high-mid,ans=0;
    long long a[n1],b[n2];

    for(long long i=0;i<n1;i++) a[i]=arr[low+i];
    for(long long i=0;i<n2;i++) b[i]=arr[mid+1+i];

    long long i=0,j=0,k=low;
    while(i<n1 && j<n2){
        if(a[i]<=b[j]){
            arr[k]=a[i];
            i++;k++;
        }
        else{
            arr[k]=b[j];
            ans+=(n1-i);
            j++;k++;
        }
    }
    while(i<n1){
        arr[k]=a[i];
        i++;
        k++;
    }
    while(j<n2){
        arr[k]=b[j];
        j++;
        k++;
    }
    return(ans);
}
long long MergeSort(long long *arr,long long low,long long high){
    long long ans=0;
    if(low<high){
        long long mid=(low+high)/2;
        ans=ans + MergeSort(arr,low,mid);
        ans=ans + MergeSort(arr, mid+1,high);

        ans=ans + Merge(arr,low,mid,high); 
    }
    return(ans);
}
long long getInversions(long long *arr, int n){
    // Write your code here.
    return(MergeSort(arr,0,n-1));
}
